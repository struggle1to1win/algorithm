@startuml
ReentrantLock -> ReentrantLock: lock()
ReentrantLock -> AbstractQueuedSynchronizer: compareAndSetState(0, 1)
note left: cas操作判断当前线程能否获取锁
AbstractQueuedSynchronizer --> Unsafe: compareAndSwapInt(this, stateOffset, expect, update)
note right: C++写的native方法，cas操作
ReentrantLock -> AbstractQueuedSynchronizer: setExclusiveOwnerThread(Thread.currentThread())
note left: 获取锁成功之后把当前线程设置进exclusiveOwnerThread字段
ReentrantLock -> AbstractQueuedSynchronizer: acquire(1)
AbstractQueuedSynchronizer -> ReentrantLock: tryAcquire(1)
ReentrantLock -> ReentrantLock: nonfairTryAcquire(1)
note left
如果当前没有线程占用锁，占用此锁
当前有线程占用此锁，判断是否当前线程（重入），都不是return false
end note
ReentrantLock -> AbstractQueuedSynchronizer:addWaiter(Node mode)
note left:为当前线程创建一个节点node，适用cas的方式将此node添加到等待队列末尾
ReentrantLock -> AbstractQueuedSynchronizer:selfInterrupt()
note left: 获取锁、添加至等待队列失败，会将本线程打断
@enduml
